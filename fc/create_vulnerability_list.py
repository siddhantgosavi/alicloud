# -*- coding: utf-8 -*-
import logging
import os
import json
import csv
import sys
from datetime import datetime

from aliyunsdkcore.client import AcsClient
from aliyunsdkcore.acs_exception.exceptions import ClientException
from aliyunsdkcore.acs_exception.exceptions import ServerException
from aliyunsdkcore.auth.credentials import RamRoleArnCredential
from aliyunsdksas.request.v20181203.DescribeVulListRequest import DescribeVulListRequest

if(len(sys.argv) == 1):
    vulType = input("Enter Vulnerability Type [cve, sys]: ")
elif(len(sys.argv) == 2):
    vulType = sys.argv[1]

print(vulType)

def handler():
    try:
        logger = logging.getLogger()
        print('Script for creating a list of all vulnerabilities...')

        ramRoleArnCredentials = RamRoleArnCredential(os.environ['AccessKeyId'], os.environ['AccessKeySecret'], os.environ['RamRoleARN'], os.environ['RoleSession'])

        client = AcsClient(region_id='us-west-1', credential=ramRoleArnCredentials)

        request = DescribeVulListRequest()
        request.set_accept_format('json')
        request.set_Lang("en")
        request.set_Type(vulType)
        request.set_PageSize(100)

        response = client.do_action_with_exception(request)

        responseData = json.loads(response)

        vulList = []
        for vul in responseData['VulRecords']:
            object = {
                'InstanceId' : vul['InstanceId'],
                'InstanceName' : vul['InstanceName'],
                'RegionId': vul['RegionId'],
                'OsVersion' :  vul['OsVersion'],
                'Os' : vul['ExtendContentJson'].get('Os',''),
                'Name': vul['Name'],
                'Online' :vul['Online'],
                'AliasName' : vul['AliasName'],
                'Related' :  vul['Related'],
                'Level' : vul['Level'],
                'Necessity' :  vul['Necessity'],
                'CanFix' : vul['CanFix'],
                'Status' : vul['Status'],
                'Uuid' :  vul['Uuid'],
                'Tag' : vul['Tag']
            }

            vulList.append(object)

        vulList = sorted(vulList, key=lambda x: x['Level'])
        filename = 'vulnerability_list_' + str(datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%S")) + '.csv'

        with open(filename, 'w', newline='') as outf:
            dw = csv.DictWriter(outf, vulList[0].keys())
            dw.writeheader()
            for vul in vulList:
                dw.writerow(vul)

    except ClientException as e:
        print(e)
    except ServerException as e:
        print(e)
    except Exception as e:
        print(e)

def parseSYSVul(vulObject):
    object = {
        'InstanceId' : vulObject['InstanceId'],
        'InstanceName' : vulObject['InstanceName'],
        'RegionId': vulObject['RegionId'],
        'OsVersion' :  vulObject['OsVersion'],
        'Os' : vulObject['ExtendContentJson']['Os'],
        'Name': vulObject['Name'],
        'Online' :vulObject['Online'],
        'AliasName' : vulObject['AliasName'],
        'Related' :  vulObject['Related'],
        'Level' : vulObject['Level'],
        'Necessity' :  vulObject['Necessity'],
        'CanFix' : vulObject['CanFix'],
        'Status' : vulObject['Status'],
        'Uuid' :  vulObject['Uuid'],
        'Tag' : vulObject['Tag']
    }

    return object

def parseCVEVul(vulObject):
    object = {
        'InstanceId' : vulObject['InstanceId'],
        'InstanceName' : vulObject['InstanceName'],
        'RegionId': vulObject['RegionId'],
        'OsVersion' :  vulObject['OsVersion'],
        'Os' : vulObject['ExtendContentJson'].get('Os',''),
        'Name': vulObject['Name'],
        'Online' :vulObject['Online'],
        'AliasName' : vulObject['AliasName'],
        'Related' :  vulObject['Related'],
        'Level' : vulObject['Level'],
        'Necessity' :  vulObject['Necessity'],
        'CanFix' : vulObject['CanFix'],
        'Status' : vulObject['Status'],
        'Uuid' :  vulObject['Uuid'],
        'Tag' : vulObject['Tag']
    }

    return object


handler()