# -*- coding: utf-8 -*-
import logging
import os
import json
import csv
import sys
from datetime import datetime

from aliyunsdkcore.client import AcsClient
from aliyunsdkcore.acs_exception.exceptions import ClientException
from aliyunsdkcore.acs_exception.exceptions import ServerException
from aliyunsdkcore.auth.credentials import RamRoleArnCredential
from aliyunsdksas.request.v20181203.DescribeVulListRequest import DescribeVulListRequest

if(len(sys.argv) == 1):
    vulType = input("Enter Vulnerability Type [cve, sys, cms, emg, app]: ")
    RoleARN = input("Enter Role ARN: ")
elif(len(sys.argv) == 2):
    vulType = sys.argv[1]
    RoleARN = input("Enter Role ARN: ")
elif(len(sys.argv) == 3):
    vulType = sys.argv[1]
    RoleARN = sys.argv[2]

print("\nVulnerability Type: " + vulType)
print("Role ARN: " + RoleARN)

RoleSession = "secops-create-vul-list-session"

def handler():
    try:
        logger = logging.getLogger()
        print('\nScript for creating a list of all vulnerabilities...')

        ramRoleArnCredentials = RamRoleArnCredential(os.environ['AccessKeyId'], os.environ['AccessKeySecret'], RoleARN, RoleSession)

        client = AcsClient(region_id='us-west-1', credential=ramRoleArnCredentials)

        request = DescribeVulListRequest()
        request.set_accept_format('json')
        request.set_Lang("en")
        request.set_Type(vulType)
        request.set_PageSize(1)

        response = client.do_action_with_exception(request)            
        request.set_PageSize(json.loads(response)['TotalCount'])

        response = client.do_action_with_exception(request)

        responseData = json.loads(response)

        vulList = []
        for vul in responseData['VulRecords']:
            # object = {
            #     'InstanceId' : vul['InstanceId'],
            #     'InstanceName' : vul['InstanceName'],
            #     'RegionId': vul['RegionId'],
            #     'OsVersion' :  vul['OsVersion'],
            #     'Os' : vul['ExtendContentJson'].get('Os',''),
            #     'Name': vul['Name'],
            #     'Online' :vul['Online'],
            #     'AliasName' : vul['AliasName'],
            #     'Related' :  vul['Related'],
            #     'Level' : vul['Level'],
            #     'Necessity' :  vul['Necessity'],
            #     'CanFix' : vul['CanFix'],
            #     'Status' : vul['Status'],
            #     'Uuid' :  vul['Uuid'],
            #     'Tag' : vul['Tag']
            # }
            object = {
                'AffectedAssets' : str(vul['InstanceId'] + " " + vul['InstanceName']),
                'RegionId': vul['RegionId'],
                'VulnerabilityName' : vul['AliasName'],
                'Impact' : vul['ExtendContentJson']['Necessity'].get('Cvss_factor',''),
                'FirstScanTime' : str(datetime.fromtimestamp(vul['FirstTs']/1000).strftime("%Y-%m-%d %H:%M:%S")),
                'LatestScanTime' :  str(datetime.fromtimestamp(vul['LastTs']/1000).strftime("%Y-%m-%d %H:%M:%S")),
                'RiskLevel' : vul['Level'],
                'Priority' :  "high" if vul['Necessity'] == "asap" else "medium" if vul['Necessity'] == "later" else "low",
                'AffectedSoftware' : ('\n').join([str(r['Name'] + " " + r['FullVersion']) for r in vul['ExtendContentJson']['RpmEntityList']]),
                'SoftwarePath' : ('\n').join([r['Path'] for r in vul['ExtendContentJson']['RpmEntityList']]),
                'Cause' :  ('\n').join([r['MatchDetail'] for r in vul['ExtendContentJson']['RpmEntityList']]),
                'Fix' : ('\n').join([r['UpdateCmd'] for r in vul['ExtendContentJson']['RpmEntityList']])
            }
            vulList.append(object)

        vulList = sorted(vulList, key=lambda x: x['RiskLevel'])
        filename = 'vulnerability_list_'+ vulType + '_' + str(datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%S")) + '.csv'

        if(len(vulList) != 0):
            with open(filename, 'w', newline='') as outf:
                dw = csv.DictWriter(outf, vulList[0].keys())
                dw.writeheader()
                for vul in vulList:
                    dw.writerow(vul)
            print("\nVulnerability list created in the file: ", filename)
        else:
            print("No Vulnerabilities found !!!")

    except ClientException as e:
        print(e)
    except ServerException as e:
        print(e)
    except Exception as e:
        print(e)

def parseSYSVul(vulObject):
    object = {
        'InstanceId' : vulObject['InstanceId'],
        'InstanceName' : vulObject['InstanceName'],
        'RegionId': vulObject['RegionId'],
        'OsVersion' :  vulObject['OsVersion'],
        'Os' : vulObject['ExtendContentJson']['Os'],
        'Name': vulObject['Name'],
        'Online' :vulObject['Online'],
        'AliasName' : vulObject['AliasName'],
        'Related' :  vulObject['Related'],
        'Level' : vulObject['Level'],
        'Necessity' :  vulObject['Necessity'],
        'CanFix' : vulObject['CanFix'],
        'Status' : vulObject['Status'],
        'Uuid' :  vulObject['Uuid'],
        'Tag' : vulObject['Tag']
    }

    return object

def parseCVEVul(vulObject):
    object = {
        'InstanceId' : vulObject['InstanceId'],
        'InstanceName' : vulObject['InstanceName'],
        'RegionId': vulObject['RegionId'],
        'OsVersion' :  vulObject['OsVersion'],
        'Os' : vulObject['ExtendContentJson'].get('Os',''),
        'Name': vulObject['Name'],
        'Online' :vulObject['Online'],
        'AliasName' : vulObject['AliasName'],
        'Related' :  vulObject['Related'],
        'Level' : vulObject['Level'],
        'Necessity' :  vulObject['Necessity'],
        'CanFix' : vulObject['CanFix'],
        'Status' : vulObject['Status'],
        'Uuid' :  vulObject['Uuid'],
        'Tag' : vulObject['Tag']
    }

    return object


handler()