# -*- coding: utf-8 -*-
import logging
import os
import json
import csv
import sys
from datetime import datetime

import smtplib
from email import encoders
from email.mime.base import MIMEBase
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

from aliyunsdkcore.client import AcsClient
from aliyunsdkcore.acs_exception.exceptions import ClientException
from aliyunsdkcore.acs_exception.exceptions import ServerException
from aliyunsdkcore.auth.credentials import RamRoleArnCredential
from aliyunsdksas.request.v20181203.DescribeVulListRequest import DescribeVulListRequest
from aliyunsdksas.request.v20181203.DescribeVulDetailsRequest import DescribeVulDetailsRequest

if(len(sys.argv) == 1):
    vulType = input("Enter Vulnerability Type [cve, sys, cms, emg, app]: ")
    RoleARN = input("Enter Role ARN: ")
    toemail = input("Enter Email: ")
elif(len(sys.argv) == 2):
    vulType = sys.argv[1]
    RoleARN = input("Enter Role ARN: ")
    toemail = input("Enter Email: ")
elif(len(sys.argv) == 3):
    vulType = sys.argv[1]
    RoleARN = sys.argv[2]
    toemail = input("Enter Email: ")
elif(len(sys.argv) == 4):
    vulType = sys.argv[1]
    RoleARN = sys.argv[2]
    toemail = sys.argv[3]

print("\nVulnerability Type: " + vulType)
print("Role ARN: " + RoleARN)
print("Email: " + toemail)

RoleSession = "secops-create-vul-list-session"

def handler():
    try:
        logger = logging.getLogger()
        print('\nScript for creating a list of all vulnerabilities...')

        ramRoleArnCredentials = RamRoleArnCredential(os.environ['AccessKeyId'], os.environ['AccessKeySecret'], RoleARN, RoleSession)

        client = AcsClient(region_id='us-west-1', credential=ramRoleArnCredentials)

        request = DescribeVulListRequest()
        request.set_accept_format('json')
        request.set_Lang("en")
        request.set_Type(vulType)
        request.set_PageSize(1)

        response = client.do_action_with_exception(request)            
        request.set_PageSize(json.loads(response)['TotalCount'])

        response = client.do_action_with_exception(request)

        responseData = json.loads(response)

        vulList = []
        for vul in responseData['VulRecords']:
            # object = {
            #     'InstanceId' : vul['InstanceId'],
            #     'InstanceName' : vul['InstanceName'],
            #     'RegionId': vul['RegionId'],
            #     'OsVersion' :  vul['OsVersion'],
            #     'Os' : vul['ExtendContentJson'].get('Os',''),
            #     'Name': vul['Name'],
            #     'Online' :vul['Online'],
            #     'AliasName' : vul['AliasName'],
            #     'Related' :  vul['Related'],
            #     'Level' : vul['Level'],
            #     'Necessity' :  vul['Necessity'],
            #     'CanFix' : vul['CanFix'],
            #     'Status' : vul['Status'],
            #     'Uuid' :  vul['Uuid'],
            #     'Tag' : vul['Tag']
            # }

            request = DescribeVulDetailsRequest()
            request.set_accept_format('json')

            request.set_Type(vulType)
            request.set_Name(vul['Name'])
            request.set_Lang("en")

            response = client.do_action_with_exception(request)

            vulDetailData = json.loads(response)
            
            object = {
                'AffectedAssets' : str(vul['InstanceId'] + " " + vul['InstanceName']),
                'RegionId': vul['RegionId'],
                'VulnerabilityName' : vul['AliasName'],
                "CVE" : vul['Related'],
                'Impact' : vul['ExtendContentJson']['Necessity'].get('Cvss_factor',''),
                'FirstScanTime' : str(datetime.fromtimestamp(vul['FirstTs']/1000).strftime("%Y-%m-%d %H:%M:%S")),
                'LatestScanTime' :  str(datetime.fromtimestamp(vul['LastTs']/1000).strftime("%Y-%m-%d %H:%M:%S")),
                'RiskLevel' : vul['Level'],
                'Priority' :  "high" if vul['Necessity'] == "asap" else "medium" if vul['Necessity'] == "later" else "low",
                'AffectedSoftware' : ('\n').join([str(r['Name'] + " " + r['FullVersion']) for r in vul['ExtendContentJson']['RpmEntityList']]),
                'SoftwarePath' : ('\n').join([r['Path'] for r in vul['ExtendContentJson']['RpmEntityList']]),
                'Cause' :  ('\n').join([r['MatchDetail'] for r in vul['ExtendContentJson']['RpmEntityList']]),
                'Fix' : ('\n').join([r['UpdateCmd'] for r in vul['ExtendContentJson']['RpmEntityList']]),
                'Summary': ('\n').join([d['Summary'] for d in vulDetailData['Cves']])
            }
            vulList.append(object)

        vulList = sorted(vulList, key=lambda x: x['RiskLevel'])
        filename = 'vulnerability_list_'+ vulType + '_' + str(datetime.utcnow().strftime("%Y-%m-%dT%H-%M-%S")) + '.csv'

        if(len(vulList) != 0):
            with open(filename, 'w', newline='') as outf:
                dw = csv.DictWriter(outf, vulList[0].keys())
                dw.writeheader()
                for vul in vulList:
                    dw.writerow(vul)
            print("\nVulnerability list created in the file: ", filename)
            print("Sending Email...")
            sendEmail(filename, toemail)
        else:
            print("No Vulnerabilities found !!!")

    except ClientException as e:
        print(e)
    except ServerException as e:
        print(e)
    except Exception as e:
        print(e)

def sendEmail(file, toemail):
    mailserver = os.environ['MailServer']
    username = os.environ['SMTPUserName']
    password = os.environ['SMTPPassword']
    toemails = toemail.split(',')
    subject = "Vulnerability Report"
    files = [file]

    msg = MIMEMultipart()
    msg['Subject'] = subject
    msg['From'] = '%s <%s>' % ('SecOps Automation', username)

    htmlbody = MIMEText ("<p>Hi,</p><p>Reports are attached in the mail.</p><p>Thanks,<br>SecOps Automation</p>", _subtype='html', _charset='UTF-8')
    msg.attach(htmlbody)

    for file in files:
        part = MIMEBase('application', "octet-stream")
        part.set_payload(open(file, "rb").read())
        encoders.encode_base64(part)
        part.add_header('Content-Disposition', 'attachment', filename=file)
        msg.attach(part)

    smtpclient = smtplib.SMTP_SSL(mailserver)
    smtpclient.connect(mailserver)
    smtpclient.login(username, password)

    smtpclient.sendmail(username, toemails, msg.as_string())
    smtpclient.close()

handler()
