# -*- coding: utf-8 -*-
import collections
import logging
import os
import json
import sys
import csv
from datetime import datetime
import time

from aliyunsdkcore.client import AcsClient
from aliyunsdkcore.acs_exception.exceptions import ClientException
from aliyunsdkcore.acs_exception.exceptions import ServerException
from aliyunsdkcore.auth.credentials import RamRoleArnCredential
from aliyunsdksas.request.v20181203.DescribeVulListRequest import DescribeVulListRequest
from aliyunsdkecs.request.v20140526.DescribeDisksRequest import DescribeDisksRequest
from aliyunsdkecs.request.v20140526.CreateSnapshotRequest import CreateSnapshotRequest
from aliyunsdkecs.request.v20140526.DescribeSnapshotsRequest import DescribeSnapshotsRequest
from aliyunsdksas.request.v20181203.ModifyOperateVulRequest import ModifyOperateVulRequest

if(len(sys.argv) == 1):
    instanceID = input("Enter Instance ID: ")
    vulType = input("Enter Vulnerability Type [cve, sys, cms, emg, app]: ")
    levelToFix = input("Enter Vulnerability level to fix [low, medium, high, serious]: ")
    region= input("Enter RegionId (Eg. cn-hangzhou, us-west-1, etc): ")
elif(len(sys.argv) == 2):
    instanceID = sys.argv[1]
    vulType = input("Enter Vulnerability Type [cve, sys, cms, emg, app]: ")
    levelToFix = input("Enter Vulnerability level to fix (low, medium, high, serious): ")
    region= input("Enter RegionId (Eg. cn-hangzhou, us-west-1, etc): ")
elif(len(sys.argv) == 3):
    instanceID = sys.argv[1]
    vulType = sys.argv[2]
    levelToFix = input("Enter Vulnerability level to fix (low, medium, high, serious): ")
    region= input("Enter RegionId (Eg. cn-hangzhou, us-west-1, etc): ")
elif(len(sys.argv) == 4):
    instanceID = sys.argv[1]
    vulType = sys.argv[2]
    levelToFix = sys.argv[3]
    region= input("Enter RegionId (Eg. cn-hangzhou, us-west-1, etc): ")
elif(len(sys.argv) == 5):
    instanceID = sys.argv[1]
    vulType = sys.argv[2]
    levelToFix = sys.argv[3]
    region= sys.argv[4]

print(instanceID)
print(vulType)
print(levelToFix)
print(region)

def handler():
    try:
        logger = logging.getLogger()
        print('Script for fixing vulnerabilities...')

        ramRoleArnCredentials = RamRoleArnCredential(os.environ['AccessKeyId'], os.environ['AccessKeySecret'], os.environ['RamRoleARN'], os.environ['RoleSession'])

        client = AcsClient(region_id=region, credential=ramRoleArnCredentials)

        request = DescribeVulListRequest()
        request.set_accept_format('json')
        request.set_Lang("en")
        request.set_Type(vulType)
        request.set_PageSize(1)

        response = client.do_action_with_exception(request)

        vulResponseData = json.loads(response)

        print("\nThe following vulnerabilities will be fixed...\n")
        vulToBeFixedRaw = [v for v in vulResponseData['VulRecords'] if (v['Level'] == levelToFix and v['InstanceId'] == instanceID)]
        
        vulList = []
        for vul in vulToBeFixedRaw: 
            print(vul['AliasName'] + "\t" + vul['Level'])
            object = {
                'InstanceId' : vul['InstanceId'],
                'InstanceName' : vul['InstanceName'],
                'RegionId': vul['RegionId'],
                'OsVersion' :  vul['OsVersion'],
                'Os' : vul['ExtendContentJson'].get('Os',''),
                'Name': vul['Name'],
                'Online' :vul['Online'],
                'AliasName' : vul['AliasName'],
                'Related' :  vul['Related'],
                'Level' : vul['Level'],
                'Necessity' :  vul['Necessity'],
                'CanFix' : vul['CanFix'],
                'Status' : vul['Status'],
                'Uuid' :  vul['Uuid'],
                'Tag' : vul['Tag']
            }

            vulList.append(object)

        if not vulToBeFixedRaw: print("Could not find any vulnerabilities to be fixed as per the input arguments... Exiting script."); exit(1)

        vulFixRequestBodyList = []
        for vul in vulToBeFixedRaw:
            object = {
                'name' : vul['Name'],
                'uuid' : vul['Uuid'],
                'tag' :  vul['Tag']
            }
            vulFixRequestBodyList.append(object)

        timestamp = str(datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%S"))
        filename = 'vulnerability_to_be_fixed_' + timestamp + '.csv'

        with open(filename, 'w', newline='') as outf:
            dw = csv.DictWriter(outf, vulList[0].keys())
            dw.writeheader()
            for vul in vulList:
                dw.writerow(vul)
        
        request = DescribeDisksRequest()
        request.set_accept_format('json')
        request.set_InstanceId(instanceID)

        response = client.do_action_with_exception(request)

        diskResponseData = json.loads(response)

        snapshotIds = []

        for disk in diskResponseData['Disks']['Disk']:
            snapshotName = "snapshot-" + disk['Type'] + "-" + disk['DiskId'] + "-"+ disk['InstanceId'] + "-" + timestamp.replace(':','-') + 'UTC'
            print("\nTaking a snapshot of the disk " + disk['DiskId'] + " as " + snapshotName)

        request = CreateSnapshotRequest()
        request.set_accept_format('json')

        request.set_DiskId(disk['DiskId'])
        request.set_SnapshotName(snapshotName)
        #request.set_Tags([{"Key": "ParentDisk", "Value": "d-gw8is3c8z0wcm83iivfo"},{"Key": "AttachedtToInstanceId","Value": "i-gw85pnpok1yn7z0xbfsr"}, {"Key": "Type", "Value": "system"}, {"Key": "BuiltDate", "Value": "2022-01-14T11:32:21"}])

        response = client.do_action_with_exception(request)
        snapshotResponseData = json.loads(response)

        print(snapshotResponseData)
        snapshotIds.append(snapshotResponseData['SnapshotId'])
        
        status = ["progressing"]
        while (not len([s for s in status if s == "accomplished"]) == len(status)):
            request = DescribeSnapshotsRequest()
            request.set_accept_format('json')

            request.set_SnapshotIds(snapshotIds)

            response = client.do_action_with_exception(request)
            snapShotDescribeData = json.loads(response)

            status = [snap['Status'] for snap in snapShotDescribeData['Snapshots']['Snapshot']]
            for snap in snapShotDescribeData['Snapshots']['Snapshot']: print(snap['SnapshotId'], end=''); print("\t", end=''); print(snap['Status'], end=''); print("\t", end=''); print(snap['Progress'])
            time.sleep(10)

        print("Initiating vulnerability fix ...")
        request = ModifyOperateVulRequest()
        request.set_accept_format('json')

        #request.set_Info("[{\"name\":\"oval:com.redhat.rhsa:def:20210221\",\"uuid\":\"ea0bed9d-65f5-4e3e-a65a-ae1b554cce42\",\"tag\":\"oval\"}]")
        request.set_Info(vulFixRequestBodyList)
        request.set_OperateType("vul_fix")
        request.set_Type(vulType)

        response = client.do_action_with_exception(request)

        print(str(response, encoding='utf-8'))

    except ClientException as e:
        print(e)
    except ServerException as e:
        print(e)
    except Exception as e:
        print(e)

handler()
