# -*- coding: utf-8 -*-
import collections
import logging
import os
import json
import sys
import csv
from datetime import datetime

from aliyunsdkcore.client import AcsClient
from aliyunsdkcore.acs_exception.exceptions import ClientException
from aliyunsdkcore.acs_exception.exceptions import ServerException
from aliyunsdkcore.auth.credentials import RamRoleArnCredential
from aliyunsdksas.request.v20181203.DescribeVulListRequest import DescribeVulListRequest
from aliyunsdksas.request.v20181203.ModifyOperateVulRequest import ModifyOperateVulRequest

instanceID = sys.argv[1]
levelToFix = sys.argv[2]

def handler():

    logger = logging.getLogger()
    print('hello world')

    ramRoleArnCredentials = RamRoleArnCredential(os.environ['AccessKeyId'], os.environ['AccessKeySecret'], os.environ['RamRoleARN'], os.environ['RoleSession'])

    client = AcsClient(region_id='us-west-1', credential=ramRoleArnCredentials)

    request = DescribeVulListRequest()
    request.set_accept_format('json')
    request.set_Type("cve")
    request.set_PageSize(5)

    response = client.do_action_with_exception(request)

    responseData = json.loads(response)

    print("\nThe following vulnerabilities will be fixed...\n")
    vulToBeFixedRaw = [v for v in responseData['VulRecords'] if (v['Level'] == 'medium' and v['InstanceId'] == 'i-gw85pnpok1yn7z0xbfsr')]
    print(vulToBeFixedRaw)

    vulFixRequestBodyList = []
    for vul in vulToBeFixedRaw:
        object = {
            'name' : vul['Name'],
            'uuid' : vul['Uuid'],
            'tag' :  vul['Tag']
        }
        vulFixRequestBodyList.append(object)

    with open('vullist.csv', 'w', newline='') as f:
        writer = csv.writer(f)
        for item in vulFixRequestBodyList:
            writer.writerow([item['name'], item['uuid'], item['tag']])
    

    # request = ModifyOperateVulRequest()
    # request.set_accept_format('json')

    # request.set_Info("[{\"name\":\"oval:com.redhat.rhsa:def:20210221\",\"uuid\":\"ea0bed9d-65f5-4e3e-a65a-ae1b554cce42\",\"tag\":\"oval\"}]")
    # request.set_OperateType("vul_fix")
    # request.set_Type("cve")

    # response = client.do_action_with_exception(request)

    # print(str(response, encoding='utf-8'))

handler()