# -*- coding: utf-8 -*-
import logging
import os
import json
import csv
from datetime import datetime

from aliyunsdkcore.client import AcsClient
from aliyunsdkcore.acs_exception.exceptions import ClientException
from aliyunsdkcore.acs_exception.exceptions import ServerException
from aliyunsdksts.request.v20150401.AssumeRoleRequest import AssumeRoleRequest
from aliyunsdkcore.auth.credentials import StsTokenCredential
from aliyunsdksas.request.v20181203.DescribeVulListRequest import DescribeVulListRequest
from aliyunsdksas.request.v20181203.DescribeVulDetailsRequest import DescribeVulDetailsRequest

def handler(event, context):
    logger = logging.getLogger()
    logger.info('\nScript for creating a list of all vulnerabilities...')

    # constructing credentials and acs client for the function compute
    sts_token_credential = StsTokenCredential(context.credentials.accessKeyId, context.credentials.accessKeySecret, context.credentials.securityToken)
    client = AcsClient(region_id='us-west-1', credential=sts_token_credential)

    # Construct an assume role request.
    request = AssumeRoleRequest()
    request.set_accept_format('json')

    # Specify request parameters.
    request.set_RoleArn(os.environ['RamRoleARN'])
    request.set_RoleSessionName(os.environ['RoleSession'])

    # Initiate the request and obtain a response.
    response = client.do_action_with_exception(request)

    object = json.loads(response)

    # constructing credentials and acs client for the assumed role
    sts_token_credential = StsTokenCredential(object['Credentials']['AccessKeyId'], object['Credentials']['AccessKeySecret'], object['Credentials']['SecurityToken'])
    client = AcsClient(region_id='us-west-1', credential=sts_token_credential)

    ###############################################################################

    request = DescribeVulListRequest()
    request.set_accept_format('json')
    request.set_Lang("en")
    request.set_Type(os.environ['VulnerabilityType'])
    request.set_PageSize(1)

    response = client.do_action_with_exception(request)            
    request.set_PageSize(json.loads(response)['TotalCount'])

    response = client.do_action_with_exception(request)

    responseData = json.loads(response)

    vulList = []
    for vul in responseData['VulRecords']:

        request = DescribeVulDetailsRequest()
        request.set_accept_format('json')

        request.set_Type(os.environ['VulnerabilityType'])
        request.set_Name(vul['Name'])
        request.set_Lang("en")

        response = client.do_action_with_exception(request)

        vulDetailData = json.loads(response)
        
        object = {
            'AffectedAssets' : str(vul['InstanceId'] + " " + vul['InstanceName']),
            'RegionId': vul['RegionId'],
            'VulnerabilityName' : vul['AliasName'],
            "CVE" : vul['Related'],
            'Impact' : vul['ExtendContentJson']['Necessity'].get('Cvss_factor',''),
            'FirstScanTime' : str(datetime.fromtimestamp(vul['FirstTs']/1000).strftime("%Y-%m-%d %H:%M:%S")),
            'LatestScanTime' :  str(datetime.fromtimestamp(vul['LastTs']/1000).strftime("%Y-%m-%d %H:%M:%S")),
            'RiskLevel' : vul['Level'],
            'Priority' :  "high" if vul['Necessity'] == "asap" else "medium" if vul['Necessity'] == "later" else "low",
            'AffectedSoftware' : ('\n').join([str(r['Name'] + " " + r['FullVersion']) for r in vul['ExtendContentJson']['RpmEntityList']]),
            'SoftwarePath' : ('\n').join([r['Path'] for r in vul['ExtendContentJson']['RpmEntityList']]),
            'Cause' :  ('\n').join([r['MatchDetail'] for r in vul['ExtendContentJson']['RpmEntityList']]),
            'Fix' : ('\n').join([r['UpdateCmd'] for r in vul['ExtendContentJson']['RpmEntityList']]),
            'Summary': ('\n').join([d['Summary'] for d in vulDetailData['Cves']])
        }
        vulList.append(object)

    vulList = sorted(vulList, key=lambda x: x['RiskLevel'])
    filename = 'vulnerability_list_'+ os.environ['VulnerabilityType'] + '_' + str(datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%S")) + '.csv'

    # for vul in vulList:
    #     logger.info(vul)

    # if(len(vulList) != 0):
    #     with open(filename, 'w', newline='') as outf:
    #         dw = csv.DictWriter(outf, vulList[0].keys())
    #         dw.writeheader()
    #         for vul in vulList:
    #             dw.writerow(vul)
    #             logger.info(vul)
    #     logger.info("\nVulnerability list created in the file: ", filename)
    # else:
    #     logger.info("No Vulnerabilities found !!!")

    return json.dumps(vulList, indent=1)