# -*- coding: utf-8 -*-
import logging
import os
import json
import csv
from datetime import datetime

import smtplib
from email import encoders
from email.mime.base import MIMEBase
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

from aliyunsdkcore.client import AcsClient
from aliyunsdksts.request.v20150401.AssumeRoleRequest import AssumeRoleRequest
from aliyunsdkcore.auth.credentials import StsTokenCredential
from aliyunsdksas.request.v20181203.DescribeVulListRequest import DescribeVulListRequest
from aliyunsdksas.request.v20181203.DescribeVulDetailsRequest import DescribeVulDetailsRequest
import oss2

def handler(event, context):
    logger = logging.getLogger()
    logger.info('\nScript for creating a list of all vulnerabilities...')
    accountNumber = os.environ['RamRoleARN'].split(':')[3]
    folder = "/home/app/" + context.service.name + "/" + accountNumber + "/"+ context.function.name
    if not os.path.exists(folder):
        os.makedirs(folder)
    os.chdir(folder)
    os.system('echo $PWD')

    # constructing credentials and acs client for the function compute
    sts_token_credential = StsTokenCredential(context.credentials.accessKeyId, context.credentials.accessKeySecret, context.credentials.securityToken)
    client = AcsClient(region_id='us-west-1', credential=sts_token_credential)

    # Construct an assume role request.
    request = AssumeRoleRequest()
    request.set_accept_format('json')

    # Specify request parameters.
    request.set_RoleArn(os.environ['RamRoleARN'])
    request.set_RoleSessionName(os.environ['RoleSession'])

    # Initiate the request and obtain a response.
    response = client.do_action_with_exception(request)

    assumeRoleData = json.loads(response)

    # constructing credentials and acs client for the assumed role
    sts_token_credential = StsTokenCredential(assumeRoleData['Credentials']['AccessKeyId'], assumeRoleData['Credentials']['AccessKeySecret'], assumeRoleData['Credentials']['SecurityToken'])
    client = AcsClient(region_id='us-west-1', credential=sts_token_credential)

    ###############################################################################

    request = DescribeVulListRequest()
    request.set_accept_format('json')
    request.set_Lang("en")
    request.set_Type(os.environ['VulnerabilityType'])
    request.set_PageSize(1)

    response = client.do_action_with_exception(request)            
    request.set_PageSize(json.loads(response)['TotalCount'])

    response = client.do_action_with_exception(request)

    responseData = json.loads(response)

    vulList = []
    for vul in responseData['VulRecords']:

        request = DescribeVulDetailsRequest()
        request.set_accept_format('json')

        request.set_Type(os.environ['VulnerabilityType'])
        request.set_Name(vul['Name'])
        request.set_Lang("en")

        response = client.do_action_with_exception(request)

        vulDetailData = json.loads(response)
        
        vulobject = {
            'AffectedAssets' : str(vul['InstanceId'] + " " + vul['InstanceName']),
            'RegionId': vul['RegionId'],
            'VulnerabilityName' : vul['AliasName'],
            "CVE" : vul['Related'],
            'Impact' : vul['ExtendContentJson']['Necessity'].get('Cvss_factor',''),
            'FirstScanTime' : str(datetime.fromtimestamp(vul['FirstTs']/1000).strftime("%Y-%m-%d %H:%M:%S")),
            'LatestScanTime' :  str(datetime.fromtimestamp(vul['LastTs']/1000).strftime("%Y-%m-%d %H:%M:%S")),
            'RiskLevel' : vul['Level'],
            'Priority' :  "high" if vul['Necessity'] == "asap" else "medium" if vul['Necessity'] == "later" else "low",
            'AffectedSoftware' : ('\n').join([str(r['Name'] + " " + r['FullVersion']) for r in vul['ExtendContentJson']['RpmEntityList']]),
            'SoftwarePath' : ('\n').join([r['Path'] for r in vul['ExtendContentJson']['RpmEntityList']]),
            'Cause' :  ('\n').join([r['MatchDetail'] for r in vul['ExtendContentJson']['RpmEntityList']]),
            'Fix' : ('\n').join([r['UpdateCmd'] for r in vul['ExtendContentJson']['RpmEntityList']]),
            'Summary': ('\n').join([d['Summary'] for d in vulDetailData['Cves']])
        }
        vulList.append(vulobject)

    vulList = sorted(vulList, key=lambda x: x['RiskLevel'])
    filename = 'vulnerability_list_'+ os.environ['VulnerabilityType'] + '_' + str(datetime.utcnow().strftime("%Y-%m-%dT%H-%M-%S")) + '.csv'

    if(len(vulList) != 0):
        with open(filename, 'w', newline='') as outf:
            dw = csv.DictWriter(outf, vulList[0].keys())
            dw.writeheader()
            for vul in vulList:
                dw.writerow(vul)
                #logger.info(vul)
        logger.info("\nVulnerability list created in the file: " + filename)

        stsAuth = oss2.StsAuth(assumeRoleData['Credentials']['AccessKeyId'], assumeRoleData['Credentials']['AccessKeySecret'], assumeRoleData['Credentials']['SecurityToken'])
        bucket = oss2.Bucket(stsAuth, os.environ['Endpoint'], os.environ['BucketName'])
        localFile = folder + "/" + filename
        blobName = context.service.name + "/" + accountNumber + "/Vulnerability_List/" + filename

        logger.info("\nUploading the file to oss bucket " + os.environ['BucketName'] + "/" + blobName)
        bucket.put_object(blobName, localFile)

        logger.info("Sending Email...")
        sendEmail(filename)
    else:
        logger.info("No Vulnerabilities found !!!")

    return True

def sendEmail(file):
    mailserver = os.environ['MailServer']
    username = os.environ['SMTPUserName']
    password = os.environ['SMTPPassword']
    toemails = os.environ['ToMail'].split(',')
    subject = "Vulnerability Report FC"
    files = [file]

    msg = MIMEMultipart()
    msg['Subject'] = subject
    msg['From'] = '%s <%s>' % ('SecOps Automation', username)
    msg['To'] = os.environ['ToMail']

    htmlbody = MIMEText ("<p>Hi,</p><p>Reports are attached in the mail.</p><p>Thanks,<br>SecOps Automation</p>", _subtype='html', _charset='UTF-8')
    msg.attach(htmlbody)

    for file in files:
        part = MIMEBase('application', "octet-stream")
        part.set_payload(open(file, "rb").read())
        encoders.encode_base64(part)
        part.add_header('Content-Disposition', 'attachment', filename=file)
        msg.attach(part)

    smtpclient = smtplib.SMTP_SSL(mailserver)
    smtpclient.connect(mailserver)
    smtpclient.login(username, password)

    smtpclient.sendmail(username, toemails, msg.as_string())
    smtpclient.close()
    