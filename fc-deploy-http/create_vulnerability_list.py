# -*- coding: utf-8 -*-
import logging
import os
import json
import csv
from datetime import datetime

import smtplib
from email import encoders
from email.mime.base import MIMEBase
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

from aliyunsdkcore.client import AcsClient
from aliyunsdksts.request.v20150401.AssumeRoleRequest import AssumeRoleRequest
from aliyunsdkcore.auth.credentials import StsTokenCredential
from aliyunsdksas.request.v20181203.DescribeVulListRequest import DescribeVulListRequest
from aliyunsdksas.request.v20181203.DescribeVulDetailsRequest import DescribeVulDetailsRequest
import oss2

def handler(environ, start_response):
    logger = logging.getLogger()
    logger.info('\nScript for creating a list of all vulnerabilities...')
    context = environ['fc.context']

    ####################################  Input Validation  #######################################
    try:        
        request_body_size = int(environ.get('CONTENT_LENGTH', 0))
    except (ValueError):        
        request_body_size = 0

    if (not request_body_size == 0):
        request_body = environ['wsgi.input'].read(request_body_size) 
        requestBody = json.loads(request_body)
        logger.info(requestBody)

        if(not (('RamRoleARN' in requestBody) and ('VulnerabilityType' in requestBody) and ('EmailAddress' in requestBody))):
            logger.info('missing or incorrect parameters passed in the body. Correct parameters are RamRoleARN, VulnerabilityType and EmailAddress')

            status = '400 Bad Request'
            response_headers = [('Content-type', 'application/json')]
            start_response(status, response_headers)
            return [b'missing or incorrect parameters passed in the body. Correct parameters are RamRoleARN, VulnerabilityType and EmailAddress']

    else:
        status = '400 Bad Request'
        response_headers = [('Content-type', 'application/json')]
        start_response(status, response_headers)
        return [b'No data']

    #####################################   Initialization    ##################################### 

    accountNumber = requestBody['RamRoleARN'].split(':')[3]
    folder = "/home/app/" + context.service.name + "/" + accountNumber + "/"+ context.function.name
    if not os.path.exists(folder):
        os.makedirs(folder)
    os.chdir(folder)
    os.system('echo $PWD')

    #####################################   Authentication    ##################################### 

    RoleSession = 'secops-vulnerability-list-session'

    # constructing credentials and acs client for the function compute
    sts_token_credential = StsTokenCredential(context.credentials.accessKeyId, context.credentials.accessKeySecret, context.credentials.securityToken)
    client = AcsClient(region_id='us-west-1', credential=sts_token_credential)

    # Construct an assume role request.
    request = AssumeRoleRequest()
    request.set_accept_format('json')

    # Specify request parameters.
    request.set_RoleArn(requestBody['RamRoleARN'])
    request.set_RoleSessionName(RoleSession)

    # Initiate the request and obtain a response.
    response = client.do_action_with_exception(request)

    assumeRoleData = json.loads(response)

    # constructing credentials and acs client for the assumed role
    sts_token_credential = StsTokenCredential(assumeRoleData['Credentials']['AccessKeyId'], assumeRoleData['Credentials']['AccessKeySecret'], assumeRoleData['Credentials']['SecurityToken'])
    client = AcsClient(region_id='us-west-1', credential=sts_token_credential)

    #####################################    Report Generation     ##################################

    request = DescribeVulListRequest()
    request.set_accept_format('json')
    request.set_Lang("en")
    request.set_Type(requestBody['VulnerabilityType'])
    request.set_PageSize(1)

    response = client.do_action_with_exception(request)            
    request.set_PageSize(json.loads(response)['TotalCount'])

    response = client.do_action_with_exception(request)

    responseData = json.loads(response)

    vulList = []
    for vul in responseData['VulRecords']:

        request = DescribeVulDetailsRequest()
        request.set_accept_format('json')

        request.set_Type(requestBody['VulnerabilityType'])
        request.set_Name(vul['Name'])
        request.set_Lang("en")

        response = client.do_action_with_exception(request)

        vulDetailData = json.loads(response)
        
        vulobject = {
            'AffectedAssets' : str(vul['InstanceId'] + " " + vul['InstanceName']),
            'RegionId': vul['RegionId'],
            'VulnerabilityName' : vul['AliasName'],
            "CVE" : vul['Related'],
            'Impact' : vul['ExtendContentJson']['Necessity'].get('Cvss_factor',''),
            'FirstScanTime' : str(datetime.fromtimestamp(vul['FirstTs']/1000).strftime("%Y-%m-%d %H:%M:%S")),
            'LatestScanTime' :  str(datetime.fromtimestamp(vul['LastTs']/1000).strftime("%Y-%m-%d %H:%M:%S")),
            'RiskLevel' : vul['Level'],
            'Priority' :  "high" if vul['Necessity'] == "asap" else "medium" if vul['Necessity'] == "later" else "low",
            'AffectedSoftware' : ('\n').join([str(r['Name'] + " " + r['FullVersion']) for r in vul['ExtendContentJson']['RpmEntityList']]),
            'SoftwarePath' : ('\n').join([r['Path'] for r in vul['ExtendContentJson']['RpmEntityList']]),
            'Cause' :  ('\n').join([r['MatchDetail'] for r in vul['ExtendContentJson']['RpmEntityList']]),
            'Fix' : ('\n').join([r['UpdateCmd'] for r in vul['ExtendContentJson']['RpmEntityList']]),
            'Summary': ('\n').join([d['Summary'] for d in vulDetailData['Cves']])
        }
        vulList.append(vulobject)
    
    instanceIds = set([v['InstanceId'] for v in responseData['VulRecords']])

    instanceStatusList = []
    for instanceId in instanceIds:

        instanceStatusObject = {
            'Name': [v['InstanceName'] for v in responseData['VulRecords'] if v['InstanceId'] == instanceId][0],
            'InstanceId': instanceId,
            "Online": [v['Online'] for v in responseData['VulRecords'] if v['InstanceId'] == instanceId][0],
        }
        instanceStatusList.append(instanceStatusObject)

    vulList = sorted(vulList, key=lambda x: x['RiskLevel'])
    filename = 'vulnerability_list_'+ requestBody['VulnerabilityType'] + '_' + str(datetime.utcnow().strftime("%Y-%m-%dT%H-%M-%S")) + '.csv'
    filename2 = 'instance_status_'+ requestBody['VulnerabilityType'] + '_' + str(datetime.utcnow().strftime("%Y-%m-%dT%H-%M-%S")) + '.csv'

    if(len(vulList) != 0):
        with open(filename, 'w', newline='') as outf:
            dw = csv.DictWriter(outf, vulList[0].keys())
            dw.writeheader()
            for vul in vulList:
                dw.writerow(vul)
        with open(filename2, 'w', newline='') as outf:
            dw = csv.DictWriter(outf, instanceStatusList[0].keys())
            dw.writeheader()
            for instance in instanceStatusList:
                dw.writerow(instance)

        logger.info("\nVulnerability list created in the file: " + filename)
        logger.info("\nInstance Status list created in the file: ", filename2)

        stsAuth = oss2.StsAuth(assumeRoleData['Credentials']['AccessKeyId'], assumeRoleData['Credentials']['AccessKeySecret'], assumeRoleData['Credentials']['SecurityToken'])
        bucket = oss2.Bucket(stsAuth, os.environ['Endpoint'], os.environ['BucketName'])
        localFile = folder + "/" + filename
        blobName = context.service.name + "/" + accountNumber + "/Vulnerability_List/" + filename

        logger.info("\nUploading the file to oss bucket " + os.environ['BucketName'] + "/" + blobName)
        bucket.put_object(blobName, localFile)

        logger.info("Sending Email...")
        sendEmail([filename, filename2], requestBody['EmailAddress'])
    else:
        logger.info("No Vulnerabilities found !!!")

    status = '200 OK'
    response_headers = [('Content-type', 'application/json')]
    start_response(status, response_headers)
    return [json.dumps(requestBody).encode('utf-8')]

def sendEmail(files, emails):
    mailserver = os.environ['MailServer']
    username = os.environ['SMTPUserName']
    password = os.environ['SMTPPassword']
    toemails = emails.split(',')
    subject = "Vulnerability Report FC"
    files = files

    msg = MIMEMultipart()
    msg['Subject'] = subject
    msg['From'] = '%s <%s>' % ('SecOps Automation', username)

    htmlbody = MIMEText ("<p>Hi,</p><p>Reports are attached in the mail.</p><p>Thanks,<br>SecOps Automation</p>", _subtype='html', _charset='UTF-8')
    msg.attach(htmlbody)

    for file in files:
        part = MIMEBase('application', "octet-stream")
        part.set_payload(open(file, "rb").read())
        encoders.encode_base64(part)
        part.add_header('Content-Disposition', 'attachment', filename=file)
        msg.attach(part)

    smtpclient = smtplib.SMTP_SSL(mailserver)
    smtpclient.connect(mailserver)
    smtpclient.login(username, password)

    smtpclient.sendmail(username, toemails, msg.as_string())
    smtpclient.close()
    